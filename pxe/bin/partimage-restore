#!/bin/sh
# backuPXE - Copyright (C) 2006-2019 Luc Deschenaux, all rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


. /pxe/etc/config
. /etc/config

export PATH=/pxe/bin/`uname -m`:/pxe/bin:/usr/local/sbin:/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin

PARTIMAGED="$1"
IMAGE_DIR="$2"
LOG=/dev/stderr

myexit() {
  if test -n  "$MOUNTPOINT" && ( mount | grep -q $MOUNTPOINT ) ; then
  	cd
  	umount $MOUNTPOINT
  fi
  [ $1 -ne 0 ] && echo `logpfx`":abort: $HWADDR" 1>&2
  exit $1
}

if [ -z "$IMAGE_DIR" ] ; then
  echo "usage: $0 <partimaged_ip> <image_directory>"
  myexit 1
fi

logpfx() {
  echo $0 $$ `date +%Y-%m-%d\ %H%M.%S\ `
}

echo "`logpfx`:notice: =========> Initialisation" 1>&2

if echo $IMAGE_DIR | egrep -q ^/dev/ ; then
        MOUNTPOINT="/mnt/`basename $IMAGE_DIR`"
        mkdir -p $MOUNTPOINT
        if ! mount.sh $IMAGE_DIR $MOUNTPOINT ; then
                echo "`logpfx` error: *** impossible de monter $IMAGE_DIR sur $MOUNTPOINT" 1>&2
                myexit 1
        fi
        IMAGE_DIR=$MOUNTPOINT
        WORKDIR=$IMAGE_DIR/$HWADDR
        PARTIMAGED=
fi

if [ -z "$MOUNTPOINT" ] ; then
  if ! echo $IMAGE_DIR | egrep -q ^/pxe/image ; then
    if ! echo $IMAGE_DIR | egrep -q ^/usr/local/image ; then
      MOUNTPOINT="/mnt/$PARTIMAGED/$IMAGE_DIR"
      mkdir -p $MOUNTPOINT
      echo "`logpfx` :notice: --- mounting $PARTIMAGED:$IMAGE_DIR" 1>&2
      if ! mount.sh $PARTIMAGED:$IMAGE_DIR $MOUNTPOINT ; then
        echo "`logpfx` error: *** impossible de monter $PARTIMAGED:$IMAGE_DIR sur $MOUNTPOINT" 1>&2
        myexit 1
      fi
      IMAGE_DIR=$MOUNTPOINT
      WORKDIR=$IMAGE_DIR/$HWADDR
      PARTIMAGED=
    fi
  fi
fi

[ -n "$NOPARTIMAGED" ] && PARTIMAGED=
[ -n "$PARTIMAGED" ] &&  PARTIMAGED=-s$PARTIMAGED

if [ -z "$WORKDIR" ] ; then
	WORKDIR=`getrec /pxe/etc/restorepath $HWADDR 2> /dev/null || true`
        if [ -z "$WORKDIR" ] ; then
                WORKDIR=$IMAGE_DIR/$HWADDR
        fi
	if echo $WORKDIR | egrep -q ^/dev/ ; then
                MOUNTPOINT="/mnt/`basename $WORKDIR`"
                mkdir -p $MOUNTPOINT
                if ! mount.sh $WORKDIR $MOUNTPOINT ; then
                        echo "`logpfx` error: *** impossible de monter $WORKDIR sur $MOUNTPOINT" 1>&2
                        myexit 1
                fi
                IMAGE_DIR=$MOUNTPOINT
                WORKDIR=$IMAGE_DIR/$HWADDR
                PARTIMAGED=
        fi
fi

if ! cd $WORKDIR ; then
  if ! cd $IMAGE_DIR/ff-ff-ff-ff-ff-ff ; then
    echo "`logpfx`:warning: *** impossible d'acceder au repertoire $WORKDIR" 1>&2
    echo "`logpfx`:error: *** impossible d'acceder au repertoire $IMAGE_DIR/ff-ff-ff-ff-ff-ff" 1>&2
    myexit 1
  else
    WORKDIR=$IMAGE_DIR/ff-ff-ff-ff-ff-ff
  fi
fi
echo "`logpfx`:notice: *** using image directory $WORKDIR" 1>&2

count2=0

if [ ! -f $WORKDIR/_ok ] ; then
    echo
    echo "`logpfx`:error: *** La sauvegarde est incomplete et ne peut pas etre restauree" 1>&2
    echo "`logpfx`:error: *** (le fichier $WORKDIR/_ok est inexistant)" 1>&2
    myexit 1
fi

for disk in `sed -r -n -e 's/.* [0-9]+ ([a-z]+)$/\1/p' /proc/partitions` ; do

  cd $WORKDIR

  BACKUPDIR=`pwd`/$disk
  [ -d "$BACKUPDIR" ] || continue

  if ! cd $BACKUPDIR  ; then
    echo "`logpfx`:warning: *** impossible d'acceder au repertoire $BACKUPDIR" 1>&2
    disk2=`echo $disk | sed -r -e 's/^h/s/' -e t -e 's/^s/h/'`
    echo `logpfx`:notice: trying $disk2 instead 1>&2
    notfound=1;
    if [ ! egrep -q $disk2\$ /proc/partitions ] ; then
      BACKUPDIR2=`pwd`/$disk2$DIRSUFFIX
      if cd $BACKUPDIR2  ; then
        BACKUPDIR=$BACKUPDIR2
      else
        echo "`logpfx`:warning: *** impossible d'acceder au repertoire $BACKUPDIR2" 1>&2
        echo `logpfx`:warning: skipped $disk 1>&2
        continue
      fi
    else
      echo `logpfx`:warning: skipped $disk 1>&2
      continue
    fi
  else
    disk2=$disk
  fi

  if [ -f ./bad ] ; then
    echo
    echo "`logpfx`:error: *** la sauvegarde est incomplete ou corrompue et ne peut pas etre restauree" 1>&2
    echo "`logpfx`:error: *** (le fichier `pwd`/bad existe)" 1>&2
    myexit 1
  fi

  if [ ! -f ./ok ] ; then
    echo
    echo "`logpfx`:error: *** La sauvegarde est incomplete et ne peut pas etre restauree" 1>&2
    echo "`logpfx`:error: *** (le fichier `pwd`/ok est inexistant)" 1>&2
    myexit 1
  fi

  if ! echo $MOUNTPOINT | grep -q /mnt/$disk ; then
    if grep -q "$HWADDR $disk2 1\$" /pxe/etc/restoresf > /dev/null ; then
      if [ "$disk" != "$disk2" ] ; then
         echo `logpfx`:error: *** par precaution, la table de partitions de $disk n a pas ete restauree automatiquement sur $disk2 1>&2
      else
        if ! sfdisk /dev/$disk < $disk.sf ; then
           echo `logpfx`:error: *** impossible de restaurer la table de partitions de $disk 1>&2
           myexit 1
        fi
        sync
        sleep 3
        if [ -x /dev/makedevs.sh ] ; then
          wd=`pwd`
       	  cd /dev
          ./makedevs.sh
          cd "$wd"
        fi
      fi
    fi
  fi

  if grep -q "$HWADDR $disk2 1\$" /pxe/etc/restorembr > /dev/null ; then
    if ! dd of=/dev/$disk2 if=$disk.mbr count=1 bs=512 ; then
      echo `logpfx`: $0 :error: "*** impossible de restaurer le MBR de $disk2 depuis `pwd`/$disk.mbr" 1>&2
      myexit 1
    fi
  fi

  if [ -f ./partitions.restore ] ; then
    PARTITIONS=partitions.restore
  else
    PARTITIONS=partitions.save
  fi

  count=0
  for PARTITION in `cat ./$PARTITIONS | sed -r -n -e 's/#.*//' -e "s/.*($disk[0-9]+).*/\1/p"` ; do

    if grep -q "/dev/$PARTITION " /proc/mounts > /dev/null ; then
        continue
    fi

    if [ -f $PARTITION.000 ] ; then
      BACKUPFILE=$PARTITION.000
    else
        echo `logpfx`:error: fichier inexistant: `pwd`/$PARTITION.000 1>&2
        myexit 1
    fi
    if [ "$disk" != "$disk2" ] ; then
      PARTITION2=`echo $PARTITION | sed -r -e 's/^h/s/' -e t -e 's/^s/h/'`
    else
      PARTITION2=$PARTITION
    fi
    cmd="partimage -o -b $PARTIMAGED restore \
        /dev/$PARTITION2 $BACKUPDIR/$BACKUPFILE"

    echo `logpfx`:exec: $cmd 1>&2

    if ! partimage -o -b $PARTIMAGED restore \
        /dev/$PARTITION2 $BACKUPDIR/$BACKUPFILE ; then
       echo "`logpfx`:error: *** la restauration a echoue ($?)" 1>&2
       myexit 1
    fi

    LOGDATE=`date +%Y-%m-%d\ %H%M.%S`
    echo "$HWADDR $LOGDATE restored $BACKUPDIR/$PARTITION $PARTITION2" >> /pxe/log/journal
    echo "$HWADDR $LOGDATE restored $PARTITION $PARTITION2" >> $BACKUPDIR/journal

    count=`expr $count + 1`
    echo "`logpfx`:done: $PARTITION2" 1>&2

  done

  if [ $count -gt 0 ] ; then
    LOGDATE=`date +%Y-%m-%d\ %H%M.%S`
    echo "$HWADDR $LOGDATE restored $BACKUPDIR" >> /pxe/log/journal
    echo "$HWADDR $LOGDATE restored $disk $disk2" >> $BACKUPDIR/journal
    echo `logpfx`":notice: $disk: $count partitions restaurees avec succes" 1>&2
    count2=`expr $count2 + $count`
  fi

  echo `logpfx`":done: $disk" 1>&2

done

if [ $count2 -eq 0 ] ; then
  myexit 1
fi

echo "$HWADDR $LOGDATE restored $WORKDIR `cat $WORKDIR/_ok`" >> /pxe/log/journal
echo "$HWADDR $LOGDATE restored $WORKDIR `cat $WORKDIR/_ok`" >> $BACKUPDIR/journal
echo `logpfx`":notice: $HWADDR: $count2 partitions restaurees avec succes" 1>&2
echo `logpfx`":done: $HWADDR `cat $WORKDIR/_ok`" 1>&2

myexit 0
